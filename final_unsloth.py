# -*- coding: utf-8 -*-
"""Final_unsloth

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AFiEKhtJjrQjYZNw8WsjhgelefSKkVCL

Unsloth install
"""

# Commented out IPython magic to ensure Python compatibility.
# %%capture
# 
# !pip install "unsloth[colab-new] @ git+https://github.com/unslothai/unsloth.git"
# !pip install --no-deps xformers trl peft accelerate bitsandbytes

"""Model and tokenizer initialization"""

from unsloth import FastLanguageModel
import torch
max_seq_length = 2048
dtype = None
load_in_4bit = True

model, tokenizer = FastLanguageModel.from_pretrained(
    model_name = "unsloth/mistral-7b-bnb-4bit",
    max_seq_length = max_seq_length,
    dtype = dtype,
    load_in_4bit = load_in_4bit,
)

"""adding lora"""

model = FastLanguageModel.get_peft_model(
    model,
    r = 16,
    target_modules = ["q_proj", "k_proj", "v_proj", "o_proj",
                      "gate_proj", "up_proj", "down_proj",],
    lora_alpha = 16,
    lora_dropout = 0,
    bias = "none",

    use_gradient_checkpointing = "unsloth",
    random_state = 3407,
    use_rslora = False,
    loftq_config = None,
)

"""structuring the dataset to chatml template in sharegpt style"""

from datasets import Dataset
import pandas as pd
from google.colab import drive
import json
from unsloth.chat_templates import get_chat_template

drive.mount('/content/drive')
file_path = '/content/drive/MyDrive/Database/formatted_dialogues.json'

df = pd.read_json(file_path)
data = df.to_dict(orient='records')


def format_intent_and_entities(intent, entities):
    formatted_entities = ', '.join([f"{k}: {v}" for k, v in entities.items()]) if entities else "NONE"
    return f"Intent: {intent}, Entities: {formatted_entities}"


def check_and_reformat_data(data):
    formatted_data = []
    for conversation in data:
        formatted_conversation = []
        for turn in conversation['turns']:

            intent_and_entities = format_intent_and_entities(turn.get('intent', 'NONE'), turn.get('entities', {}))


            formatted_conversation.append({
                "role": "human",
                "content": f"{intent_and_entities}, {turn['utterance']}"
            })

            formatted_conversation.append({
                "role": "gpt",
                "content": turn['response']
            })
        formatted_data.append(formatted_conversation)
    return formatted_data


formatted_conversations = check_and_reformat_data(data)

def formatting_prompts_func(examples):
    convos = examples["conversations"]
    texts = [tokenizer.apply_chat_template(convo, tokenize=False, add_generation_prompt=False) for convo in convos]
    return {"text": texts}


formatted_data = formatting_prompts_func({"conversations": formatted_conversations})
dataset = Dataset.from_dict(formatted_data)

dataset.save_to_disk('formatted_dataset')

print(dataset[5]["text"])

from trl import SFTTrainer
from transformers import TrainingArguments
from unsloth import is_bfloat16_supported

trainer = SFTTrainer(
    model = model,
    tokenizer = tokenizer,
    train_dataset = dataset,
    dataset_text_field = "text",
    max_seq_length = max_seq_length,
    dataset_num_proc = 2,
    packing = False,
    args = TrainingArguments(
        per_device_train_batch_size = 2,
        gradient_accumulation_steps = 4,
        warmup_steps = 5,
        max_steps = 40,
        learning_rate = 2e-4,
        fp16 = not is_bfloat16_supported(),
        bf16 = is_bfloat16_supported(),
        logging_steps = 1,
        optim = "adamw_8bit",
        weight_decay = 0.01,
        lr_scheduler_type = "linear",
        seed = 3407,
        output_dir = "outputs",
    ),
)

trainer_stats = trainer.train()

"""INFERENCE"""

from unsloth.chat_templates import get_chat_template
from transformers import AutoTokenizer, AutoModelForCausalLM
import torch


tokenizer = get_chat_template(
    AutoTokenizer.from_pretrained('gpt2'),
    chat_template="chatml",
    mapping={"role": "from", "content": "value", "user": "human", "assistant": "gpt"},
    map_eos_token=True,
)


model = AutoModelForCausalLM.from_pretrained('gpt2').half().cuda()


messages = [
    {
        "from": "human",
        "value": " I'm bored. Can you suggest something interesting to do?"
    }
]


inputs = tokenizer.apply_chat_template(
    messages,
    tokenize=True,
    add_generation_prompt=True,
    return_tensors="pt",
).to("cuda")


print("Inputs shape:", inputs.shape)


outputs = model.generate(input_ids=inputs, max_new_tokens=64, use_cache=True)
decoded_outputs = tokenizer.batch_decode(outputs, skip_special_tokens=True)
print(decoded_outputs)

"""inference with context"""

from unsloth.chat_templates import get_chat_template
import torch


tokenizer = get_chat_template(
    tokenizer,
    chat_template="chatml",
    mapping={"role": "from", "content": "value", "user": "human", "assistant": "gpt"},
    map_eos_token=True,
)


FastLanguageModel.for_inference(model)

#conversation history
conversation_history = []


def add_message(role, content):
    conversation_history.append({"from": role, "value": content})


def generate_response():
    inputs = tokenizer.apply_chat_template(
        conversation_history,
        tokenize=True,
        add_generation_prompt=True,
        return_tensors="pt",
    ).to("cuda")

    outputs = model.generate(input_ids=inputs, max_new_tokens=64, use_cache=True)
    response = tokenizer.batch_decode(outputs, skip_special_tokens=True)[0]

    return response


while True:
    user_input = input("You: ")
    add_message("human", user_input)
    response = generate_response()
    print(f"GPT: {response}")
    add_message("gpt", response)